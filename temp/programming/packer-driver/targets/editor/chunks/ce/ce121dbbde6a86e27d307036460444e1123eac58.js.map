{"version":3,"sources":["file:///C:/D-Disk/cocos%20project/ScrollTest/assets/scripts/ScrollViewRendererCtrl.ts"],"names":["_decorator","Component","ScrollView","Vec3","Rect","UITransform","ScrollViewPlusItem","ccclass","property","ScrollViewRendererCtrl","start","update","deltaTime","onEnable","node","on","_onScrollingDrawCallOpt","onDisable","off","scrollView","content","children","length","calculate","uiTransform","getComponent","parentTransform","parent","scrollViewPosition","position","svLeftBottomPoint","convertToWorldSpaceAR","x","anchorX","width","y","anchorY","height","z","svBBoxRect","console","log","forEach","childNode","childTransform","itemComponent","getBoundingBoxToWorld","intersects","isShowing","publishOnEnterScrollView","publishOnExitScrollView"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, ScrollView,Vec2,Vec3, Rect, UITransform, UIOpacity } from 'cc';\nimport { ScrollViewPlusItem } from './ScrollViewPlusItem';\nconst { ccclass, property } = _decorator;\n\n@ccclass('ScrollViewRendererCtrl')\nexport class ScrollViewRendererCtrl extends Component {\n    \n    @property(ScrollView)\n    scrollView:ScrollView;\n\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n        \n    }\n\n    protected onEnable(): void {\n        this.node.on(\"scrolling\", this._onScrollingDrawCallOpt, this);\n    }\n\n    protected onDisable(): void {\n        this.node.off(\"scrolling\", this._onScrollingDrawCallOpt, this);\n    }\n\n    public _onScrollingDrawCallOpt() {\n        if (this.scrollView.content!.children.length === 0) {\n            return;\n        }\n        // 上文提及到的碰撞检测代码\n        this.calculate();\n    }\n\n    \n    public calculate(){\n        // 获取 ScrollView Node 的 UITransform 组件\nlet uiTransform = this.scrollView.node.getComponent(UITransform);\n\nif (uiTransform) {\n  // 获取 ScrollView Node 的父节点的 UITransform 组件\n  let parentTransform = this.scrollView.node.parent!.getComponent(UITransform);\n  \n  if (parentTransform) {\n    // 将 Vec3 的位置转换为 Vec2\n    let scrollViewPosition = this.scrollView.node.position;\n    let svLeftBottomPoint = parentTransform.convertToWorldSpaceAR(\n      new Vec3(\n        scrollViewPosition.x - uiTransform.anchorX * uiTransform.width,\n        scrollViewPosition.y - uiTransform.anchorY * uiTransform.height,\n        scrollViewPosition.z\n      )\n    );\n\n     // 求出 ScrollView 可视区域在世界坐标系中的矩形（碰撞盒）\n     let svBBoxRect: Rect = new Rect(\n        svLeftBottomPoint.x,\n        svLeftBottomPoint.y,\n        uiTransform.width,\n        uiTransform.height\n      );\n  \n      console.log('ScrollView Bounding Box:', svBBoxRect);\n  \n    //   // 遍历 ScrollView Content 内容节点的子节点\n    //   this.scrollView.content!.children.forEach((childNode: Node) => {\n    //     // 获取子节点的 UITransform 组件\n    //     let childTransform = childNode.getComponent(UITransform);\n  \n    //     if (childTransform) {\n    //       // 获取子节点的包围盒\n    //       let childBoundingBox = childTransform.getBoundingBoxToWorld();\n    //       // 获取子节点的 UIOpacity 组件\n    //       let childOpacity = childNode.getComponent(UIOpacity);\n  \n    //       if (!childOpacity) {\n    //         // 如果子节点没有 UIOpacity 组件，则添加一个\n    //         childOpacity = childNode.addComponent(UIOpacity);\n    //       }\n  \n    //       // 对每个子节点的包围盒做和 ScrollView 可视区域包围盒做碰撞判断\n    //       // 如果相交了，那么就显示，否则就隐藏\n    //       if (childBoundingBox.intersects(svBBoxRect)) {\n    //         if (childOpacity.opacity !== 255) {\n    //           childOpacity.opacity = 255;\n\n    //           // childNode.emit(\"on_enter_scroll_view\");\n    //         }\n    //       } else {\n    //         if (childOpacity.opacity !== 0) {\n    //           childOpacity.opacity = 0;\n    //           // childNode.emit(\"on_exit_scroll_view\");\n    //         }\n    //       }\n    //     }\n    //   });\n\n\n\n      // 遍历 ScrollView Content 内容节点的子节点\n      this.scrollView.content!.children.forEach((childNode: Node) => {\n        // 获取子节点的 UITransform 组件\n        let childTransform = childNode.getComponent(UITransform);\n  \n        // 没有绑定指定组件的子节点不处理\n    let itemComponent = childNode.getComponent(ScrollViewPlusItem);\n    if (itemComponent == null) {\n        return;\n    }\n\n    // 如果相交了，那么就显示，否则就隐藏\n    if (childTransform.getBoundingBoxToWorld().intersects(svBBoxRect)) {\n        if (!itemComponent.isShowing) {\n            itemComponent.isShowing = true;\n            itemComponent.publishOnEnterScrollView();\n        }\n    } else {\n        if (itemComponent.isShowing) {\n            itemComponent.isShowing = false;\n            itemComponent.publishOnExitScrollView();\n        }\n    }\n      });\n\n\n\n\n\n    }\n\n    \n  }\n}}"]}